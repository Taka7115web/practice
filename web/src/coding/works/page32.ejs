<% var meta = {
    pageTitle:'',
    description:'foo',
    keywords:'foo',
    url:'http://www.example.com/'
  };
  var page={
      root:filePath.dir
  };
%>
<% var imgpath = '/assets/img/coding/page/' %>
<%- include(page.root + 'common/meta/coding/_page', {param:'param'}); %>
<div id="c-page">
  <main class="c-page">

    <page name="work32" tab="3">

      <template slot="mainCont">
        <div class="canvas-parent" id="parent">
          <canvas id="myCanvas"></canvas>
        </div>
      </template>

      <template slot="html">
        <!-- ソースとしてhtmlを記述 -->
      </template>

      <template slot="css">
        .canvas-parent {
        width: 100%;
        height: 100%;
        cursor: pointer;
        }
      </template>

      <template slot="js">
        // three.jsをnode moduleから読み込み
        import * as THREE from 'three';
        // orbitControls.jsをnode moduleから読み込み
        import {
        OrbitControls
        } from "three/examples/jsm/controls/OrbitControls";

        /**
        * createdのタイミングでinit()関数実行
        */
        window.addEventListener('load', init);

        /**
        * リサイズイベント発生時に実行
        */
        window.addEventListener('resize', onResize);

        // ----------------------------------------------------------------------

        //親要素を取得
        let parent = document.getElementById("parent");

        // 親要素の幅と高さを変数化
        let cW = parent.clientWidth;
        let cH = parent.clientHeight;

        // グローバルでの変数定義
        var renderer, scene, camera, container, controls, directionalLight,
        ambientLight, geometryList, material, mesh;

        // OrbitControls用domElement変数
        let domElement = document.getElementById("myCanvas");

        // カメラ位置
        var cameraPos = {
        x: 0,
        y: 800,
        z: 800
        }

        // 光源位置
        var lightPos = {
        x: -.3,
        y: .7,
        z: .6
        }

        // オブジェクトの配色
        var colorArray = ["turquoise", "lime", "yellow", "blue", "pink", "purple", "red"]

        // ----------------------------------------------------------------------

        /**
        * キャンバスの描画内容
        */
        function init() {

        // rendererインスタンス定義(canvas要素にWebGL使用定義)
        renderer = new THREE.WebGLRenderer({
        canvas: document.querySelector('#myCanvas')
        });
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(cW, cH);
        renderer.setClearColor("grey", .2);

        // シーンを定義
        scene = new THREE.Scene();

        // カメラを定義
        camera = new THREE.PerspectiveCamera(
        45,
        cW / cH,
        1,
        10000
        );
        camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);
        camera.lookAt(new THREE.Vector3(0, 0, 0));
        camera.position.set(cameraPos.x, cameraPos.y, cameraPos.z);
        scene.add(camera);

        // mousedragで、カメラ位置変更
        controls = new OrbitControls(camera, domElement);

        // 平行光源を定義
        directionalLight = new THREE.DirectionalLight(0xffffff);
        directionalLight.position.set(lightPos.x, lightPos.y, lightPos.z);
        scene.add(directionalLight);
        // 環境光源を定義
        ambientLight = new THREE.AmbientLight(0x999999);
        ambientLight.intensity = .5;
        scene.add(ambientLight);

        // コンテナー(7つのジオメトリを体系化したオブジェクト)を定義
        container = new THREE.Object3D();
        scene.add(container);

        // ジオメトリを定義
        geometryList = [
        new THREE.SphereGeometry(40, 40, 40), // 球体
        new THREE.BoxGeometry(75, 75, 75), // 直方体
        new THREE.PlaneGeometry(75, 75), // 平面
        new THREE.TetrahedronGeometry(75, 0), // カプセル形状
        new THREE.ConeGeometry(75, 75, 24), // 三角錐
        new THREE.CylinderGeometry(75, 75, 75, 24), // 円柱
        new THREE.TorusGeometry(75, 20, 12, 75) // ドーナツ形状
        ];

        // geometryList配列をもとにオブジェクトを定義していく
        geometryList.map((geometry, i) =&gt; {

        // マテリアルを定義
        material = new THREE.MeshStandardMaterial({
        color: colorArray[i],
        side: THREE.DoubleSide
        });

        // オブジェクトを定義
        mesh = new THREE.Mesh(geometry, material);

        // オブジェクトを円周上に配置
        mesh.position.x =
        300 * Math.sin((i / geometryList.length) * Math.PI * 2);
        mesh.position.z =
        300 * Math.cos((i / geometryList.length) * Math.PI * 2);

        // container空間にオブジェクトを定義
        container.add(mesh);

        });

        // 常に連続的に描画するため、animate()関数実行
        animate();

        }

        // ----------------------------------------------------------------------

        /**
        * 常に連続的に描画するためのアニメーション関数
        */
        function animate() {
        // mousedragでカメラ位置変更
        controls.update();
        // rendererインスタンスにシーンとカメラを渡し、レンダリング
        renderer.render(scene, camera);
        // animate()関数を連続実行
        requestAnimationFrame(animate);
        }

        /**
        * リサイズ時の調整関数
        */
        function onResize() {
        // 親要素の幅と高さを変数化
        let cW = parent.clientWidth;
        let cH = parent.clientHeight;

        // レンダラーのサイズを調整する
        renderer.setPixelRatio(window.devicePixelRatio);
        renderer.setSize(cW, cH);

        // カメラのアスペクト比を正す
        camera.aspect = cW / cH;
        camera.updateProjectionMatrix();
        }
      </template>
    </page>
  </main>
</div>

<%- include(page.root + 'common/_footer', {param:'param'}); %>

<!-- css manipulation ----------------------------------------- -->
<style type="text/css">
  .canvas-parent {
    width: 100%;
    height: 100%;
    cursor: pointer;
  }

</style>

<!-- call the common javascript ------------------------------------ -->
<script type="text/javascript" src="<%-conf.path.js%>coding/c-page.js"></script>



<!------------------------------------------- javascript manipulatio -->

</body>

</html>
