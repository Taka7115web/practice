<% var meta = {
    pageTitle:'',
    description:'foo',
    keywords:'foo',
    url:'http://www.example.com/'
  };
  var page={
      root:filePath.dir
  };
%>
<% var imgpath = '/assets/img/coding/page/' %>
<%- include(page.root + 'common/meta/coding/_page', {param:'param'}); %>
<div id="c-page">
  <main class="c-page">


    <page name="work10" tab="3">


      <template slot="mainCont">
        <div class="canvas-parent" id="canvasParent">
          <canvas id="canvas"></canvas>
        </div>
      </template>



      <template slot="html">
        &lt;div class="canvas-parent" id="canvasParent"&gt;
        &lt;canvas id="canvas"&gt;&lt;/canvas&gt;
        &lt;/div&gt;
      </template>


      <template slot="css">
        .canvas-parent {
        width: 100%;
        height: 100%;
        cursor: pointer;
        }
      </template>


      <template slot="js">

        //親要素とcanvas要素を取得
        const canvasParent = document.getElementById("canvasParent");
        const canvas = document.getElementById("canvas");

        // Canvas利用不可の環境では実行しないようにif文で囲む
        if (canvas.getContext) {

        // canvasの幅と高さを親要素のサイズに合わせる
        canvas.width = canvasParent.clientWidth;
        canvas.height = canvasParent.clientHeight;

        // Canvasに描画機能を付与
        let c = canvas.getContext('2d');

        // canvasのサイズを取得
        let canvasSize = canvas.getBoundingClientRect();
        // 画面左端からcanvasまでの距離を取得
        let canvasLeft = canvasSize.left;
        // 画面上端からcanvasまでの距離を取得
        let canvasTop = canvasSize.top;
        // 画面の初期スクロール量を取得
        const windowFirstS = window.scrollY;

        //マウスの初期値を設定
        let e = {
        clientX: undefined,
        clientY: undefined
        }

        // 描画するか、しないかの真偽を定めた変数
        let painting = false;

        // 描画実行関数
        function startPosition() {
        painting = true;
        draw(e);
        }

        // 描画不実行関数
        function endPosition() {
        painting = false;
        c.beginPath();
        }

        /**
        * 線を描画する関数
        */
        function draw(e) {

        // 変数paintingがfalseの場合は、下記の記述を読み込まない
        if (!painting) return;

        // 画面のスクロール量を取得
        let windowS = window.scrollY;

        // 線のスタイルを設定
        c.clientWidth = 10;
        c.lineCap = "round";

        // カーソルの正しい位置を変数化
        let x = e.clientX - canvasLeft;
        let y = e.clientY - canvasTop - windowFirstS + windowS;

        // 線を引く
        c.lineTo(x, y);
        c.stroke();
        c.beginPath();
        c.moveTo(x, y);

        }

        /**
        * 線の描画を操作するイベント処理
        */
        canvas.addEventListener("mousedown", startPosition);
        canvas.addEventListener("mouseup", endPosition);
        canvas.addEventListener("mousemove", draw);

        }
      </template>
    </page>
  </main>
</div>

<%- include(page.root + 'common/_footer', {param:'param'}); %>

<!-- css manipulation ----------------------------------------- -->
<style type="text/css">
  .canvas-parent {
    width: 100%;
    height: 100%;
    cursor: pointer;
  }

</style>

<!-- call the common javascript ------------------------------------ -->
<script type="text/javascript" src="<%-conf.path.js%>coding/c-page.js"></script>



<!------------------------------------------- javascript manipulatio -->

</body>

</html>
